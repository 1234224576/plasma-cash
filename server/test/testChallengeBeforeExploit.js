const ValidatorManagerContract = artifacts.require("ValidatorManagerContract");
const CryptoCards = artifacts.require("CryptoCards");
const RootChain = artifacts.require("RootChain");
import {increaseTimeTo, duration} from './helpers/increaseTime'
import assertRevert from './helpers/assertRevert.js';

const txlib = require('./UTXO.js')

contract("Plasma ERC721 - Invalid History Challenge / `challengeBefore`", async function(accounts) {

    const t1 = 3600 * 24 * 3; // 3 days later
    const t2 = 3600 * 24 * 5; // 5 days later

    // Alice registers and has 5 coins, and she deposits 3 of them.
    const ALICE_INITIAL_COINS = 5;
    const ALICE_DEPOSITED_COINS = 3;
    const COINS = [1, 2, 3];

    let cards;
    let plasma;
    let vmc;
    let events;
    let t0;

    let [authority, alice, bob, mallory] = accounts;

    beforeEach(async function() {
        vmc = await ValidatorManagerContract.new({from: authority});
        plasma = await RootChain.new(vmc.address, {from: authority});
        cards = await CryptoCards.new(plasma.address);
        await vmc.toggleToken(cards.address);
        cards.register({from: alice});
        assert.equal(await cards.balanceOf.call(alice), 5);

        let ret;
        for (let i = 0; i < ALICE_DEPOSITED_COINS; i ++) {
            await cards.depositToPlasma(COINS[i], {from: alice});
        }


        assert.equal((await cards.balanceOf.call(alice)).toNumber(), ALICE_INITIAL_COINS - ALICE_DEPOSITED_COINS);
        assert.equal((await cards.balanceOf.call(plasma.address)).toNumber(), ALICE_DEPOSITED_COINS);

        const depositEvent = plasma.Deposit({}, {fromBlock: 0, toBlock: 'latest'});
        events = await txlib.Promisify(cb => depositEvent.get(cb));

        // Check that events were emitted properly
        let coin;
        for (let i = 0; i < events.length; i++) {
            coin = events[i].args;
            assert.equal(coin.blockNumber.toNumber(), i+1);
            assert.equal(coin.denomination.toNumber(), 1);
            assert.equal(coin.from, alice);
        }

    });

    describe('Demonstrating challengeBeforeExploit', function() {
        it("Elliot makes a valid exit which gets challenged, however he responds with `respondChallengeBefore`", async function() {
            let UTXO = {'slot': events[2]['args'].slot, 'block': events[2]['args'].blockNumber.toNumber()};
            let alice_to_bob = txlib.createUTXO(UTXO.slot, UTXO.block, alice, bob);
            let txs = [alice_to_bob.leaf];
            let tree_bob = await txlib.submitTransactions(authority, plasma, txs);

            await plasma.submitBlock('0x0', {from: authority});

            // Tx to Charlie from Bob referencing Bob's UTXO at block 1000
            let prevBlock = 1000;
            let bob_to_alice = txlib.createUTXO(UTXO.slot, prevBlock, bob, alice);
            txs = [bob_to_alice.leaf];


            let tree_alice = await txlib.submitTransactions(authority, plasma, txs);

            // mallory tries to exit
            // alice challenges
            // mallory responds
            // alice exits her coin

            let exitBlock = 3000;

            let sig = bob_to_alice.sig

            let prev_tx_proof = tree_bob.createMerkleProof(UTXO.slot)
            let exiting_tx_proof = tree_alice.createMerkleProof(UTXO.slot)

            let prev_tx = alice_to_bob.tx;
            let exiting_tx = bob_to_alice.tx;

            plasma.startExit(
                    UTXO.slot,
                    prev_tx, exiting_tx,
                    prev_tx_proof, exiting_tx_proof,
                    sig,
                    [prevBlock, exitBlock],
                    {'from': alice, 'value': web3.toWei(0.1, 'ether')}
            );
            t0 = (await web3.eth.getBlock('latest')).timestamp;

            // Even though the coin still belongs to Alice, it is in the `EXITING` state so it shouldn't be possible for her to exit it
            assertRevert(plasma.withdraw(UTXO.slot, {from: alice}));

            // After the exit is matured and finalized, Alice can withdraw the coin.
            await increaseTimeTo(t0 + t1 + t2);
            await plasma.finalizeExits({from: authority});
            assertRevert(plasma.withdraw(UTXO.slot, {from: mallory}));
            assertRevert(plasma.withdraw(UTXO.slot, {from: bob}));
            await plasma.withdraw(UTXO.slot, {from: alice});
            assert.equal(await cards.balanceOf.call(alice), 3);
            assert.equal(await cards.balanceOf.call(bob), 0);
            assert.equal(await cards.balanceOf.call(mallory), 0);
            assert.equal(await cards.balanceOf.call(plasma.address), 2);

            // Alice is also able to withdraw his deposit bond of 0.1 ether
            await txlib.withdrawBonds(plasma, alice, 0.1);
        });
    });
});
