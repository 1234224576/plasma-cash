const CryptoCards = artifacts.require("CryptoCards");
const RootChain = artifacts.require("RootChain");

const SparseMerkleTree = require('./SparseMerkleTree.js');

import {increaseTimeTo, duration} from './helpers/increaseTime'
import assertRevert from './helpers/assertRevert.js';

const txlib = require('./UTXO.js')

contract("Plasma ERC721 - Challenge Exploit test", async function(accounts) {

    const t1 = 3600 * 24 * 3; // 3 days later
    const t2 = 3600 * 24 * 5; // 5 days later

    // Alice registers and has 5 coins, and she deposits 3 of them.
    const ALICE_INITIAL_COINS = 5;
    const ALICE_DEPOSITED_COINS = 3;
    const COINS = [1, 2, 3];

    let cards;
    let plasma;
    let events;
    let t0;

    let [authority, alice, bob, charlie, dylan, elliot, random_guy, random_guy2, challenger] = accounts;

    beforeEach(async function() {
        plasma = await RootChain.new({from: authority});
        cards = await CryptoCards.new(plasma.address);
        plasma.setERC721(cards.address);
        cards.register({from: alice});
        assert.equal(await cards.balanceOf.call(alice), 5);

        let ret;
        for (let i = 0; i < ALICE_DEPOSITED_COINS; i ++) {
            await cards.depositToPlasma(COINS[i], {from: alice});
        }


        assert.equal((await cards.balanceOf.call(alice)).toNumber(), ALICE_INITIAL_COINS - ALICE_DEPOSITED_COINS);
        assert.equal((await cards.balanceOf.call(plasma.address)).toNumber(), ALICE_DEPOSITED_COINS);

        const depositEvent = plasma.Deposit({}, {fromBlock: 0, toBlock: 'latest'});
        events = await txlib.Promisify(cb => depositEvent.get(cb));

        // Check that events were emitted properly
        let coin;
        for (let i = 0; i < events.length; i++) {
            coin = events[i].args;
            // assert.equal(coin.slot.toNumber(), i);
            assert.equal(coin.blockNumber.toNumber(), i+1);
            assert.equal(coin.denomination.toNumber(), 1);
            assert.equal(coin.from, alice);
        }

    });


    describe('Challenge after Exploit', function() {

        it("Alice sends Bob UTXO 2, submits it, Bob holds his coin. Operator colludes and creates an invalid block + tx. Bob tries to exit but gets challenged with an invalid spend", async function() {
            let UTXO = {'slot': events[2]['args'].slot, 'block': events[2]['args'].blockNumber.toNumber()};
            let alice_to_bob = txlib.createUTXO(UTXO.slot, UTXO.block, alice, bob);
            let txs = [ alice_to_bob.leaf ];
            let tree_1000 = await txlib.submitTransactions(authority, plasma, txs);

            // Nevertheless, Charlie pretends he received the coin, and by
            // colluding with the chain operator he is able to include his
            // invalid transaction in a block.
            let charlie_to_dylan = txlib.createUTXO(UTXO.slot, 1000, charlie, dylan);
            txs = [charlie_to_dylan.leaf]
            let invalid_tree = await txlib.submitTransactions(authority, plasma, txs);

            // Bob tries to exit his coin
            let sig = alice_to_bob.sig;
            let utxo = alice_to_bob.tx;
            let proof = tree_1000.createMerkleProof(UTXO.slot);
            
            let prev_tx = txlib.createUTXO(UTXO.slot, 0, alice, alice).tx;

            await plasma.startExit(
                UTXO.slot, 
                prev_tx, utxo, 
                '0x0', proof,
                sig,
                3, 1000, 
                {'from': bob, 'value': web3.toWei(0.1, 'ether')}
            );
            t0 = (await web3.eth.getBlock('latest')).timestamp;
            
            // but Dylan is unable to challenge with his invalid spend!
            utxo = charlie_to_dylan.tx;
            sig = charlie_to_dylan.sig;
            proof = invalid_tree.createMerkleProof(UTXO.slot);

            // Previously this challenge would be successful
            assertRevert(plasma.challengeAfter(
                UTXO.slot,
                2000,
                utxo,
                proof,
                sig,
                {'from': dylan}
            ));

            await increaseTimeTo(t0 + t1 + t2);
            await plasma.finalizeExits({from: random_guy2});
            await plasma.withdraw(UTXO.slot, {from : bob});
            await txlib.withdrawBonds(plasma, bob, 0.1);

        });
    });

});
